// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SailView.Data;

#nullable disable

namespace SailView.Migrations
{
    [DbContext(typeof(SailAppDbContext))]
    partial class SailAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("SailView.Data.Models.BoatDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BoatName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<string>("BoatType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SailNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SailNumber")
                        .IsUnique();

                    b.ToTable("BoatDetail");
                });

            modelBuilder.Entity("SailView.Data.Models.BoatRaces", b =>
                {
                    b.Property<int>("BoatId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RaceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FinishingStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("HelmName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("TimingRecord")
                        .HasColumnType("TEXT");

                    b.HasKey("BoatId", "RaceId");

                    b.HasIndex("RaceId");

                    b.ToTable("BoatRace");
                });

            modelBuilder.Entity("SailView.Data.Models.RaceResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoatDetailsId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CorrectedTime")
                        .HasColumnType("REAL");

                    b.Property<double>("ElapsedTime")
                        .HasColumnType("REAL");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RaceDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BoatDetailsId");

                    b.ToTable("RaceResults");
                });

            modelBuilder.Entity("SailView.Data.Models.Races", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BoatDetailsID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RaceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RacePosition")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("RaceTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("Race");
                });

            modelBuilder.Entity("SailView.Data.Models.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("SailView.Data.Models.BoatRaces", b =>
                {
                    b.HasOne("SailView.Data.Models.BoatDetails", "BoatDetails")
                        .WithMany("BoatRaces")
                        .HasForeignKey("BoatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SailView.Data.Models.Races", "Races")
                        .WithMany("BoatRaces")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoatDetails");

                    b.Navigation("Races");
                });

            modelBuilder.Entity("SailView.Data.Models.RaceResults", b =>
                {
                    b.HasOne("SailView.Data.Models.BoatDetails", "BoatDetails")
                        .WithMany("RaceResults")
                        .HasForeignKey("BoatDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoatDetails");
                });

            modelBuilder.Entity("SailView.Data.Models.Races", b =>
                {
                    b.HasOne("SailView.Data.Models.Series", "Series")
                        .WithMany("Races")
                        .HasForeignKey("SeriesId");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("SailView.Data.Models.BoatDetails", b =>
                {
                    b.Navigation("BoatRaces");

                    b.Navigation("RaceResults");
                });

            modelBuilder.Entity("SailView.Data.Models.Races", b =>
                {
                    b.Navigation("BoatRaces");
                });

            modelBuilder.Entity("SailView.Data.Models.Series", b =>
                {
                    b.Navigation("Races");
                });
#pragma warning restore 612, 618
        }
    }
}
