@using System.Threading
@inherits LayoutComponentBase

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<PageTitle>SailView</PageTitle>

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        SailView
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <NavMenu />
    </MudDrawer>
    <div class="page-layout">
        <MudMainContent>
            <div class="top-row px-4 auth">
                <a>@today.ToString("dddd, dd MMMM yyyy"), @theTime</a>
                <LoginDisplay />
            </div>
            <MudContainer MaxWidth="MaxWidth.Medium" class="page-content">
                @Body
            </MudContainer>
        </MudMainContent>
        <footer class="main-footer">
            <MudContainer class="footer-container">
                <div class="centered-text">
                    <MudText Typo="Typo.body1">
                        Copyright © 2023 SailView
                    </MudText>
                </div>
            </MudContainer>
        </footer>
    </div>
</MudLayout>


@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    DateTime today = DateTime.Now;

    string theTime;
    Timer aTimer;

    protected override void OnInitialized()
    {
        aTimer = new Timer(Tick, null, 0, 1000);
        StateHasChanged();
    }

    private void Tick(object _)
    {
        DateTime adjustedTime = DateTime.Now.AddHours(1);
        theTime = adjustedTime.ToLongTimeString();
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        aTimer?.Dispose();
    }


    //protected override void OnInitialized()
    //{
    //    StateHasChanged();
    //}
}


