@page "/racelist"
@attribute [Authorize]
@using SailView.Services;
@using SailView.Data.Models;
@using SailView.Data;
@using System.Linq;
@inject ExportService exportService
@inject Microsoft.JSInterop.IJSRuntime JS
@using System.IO;
@inject ISnackbar Snackbar
@using System.Net.Http.Json;
@inject HttpClient httpClient
@inject ResultService resultService;
@inject RaceService raceService;
@inject ILogger<RaceList> Logger;

<br />

<MudButton Variant="Variant.Filled" Color="Color.Primary" Href="NewRace">Add New Race</MudButton>
<br />
<br />

<h1>Individual One Design Races</h1>

@if (races is null)
{
    <p><em>Loading. . . !</em></p>
}
else
{

    <MudTable Items="races" Hover="true" Filter="new Func<Races, bool>(FilterFunc1)" Breakpoint="Breakpoint.Sm">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Race Entries</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search For Races" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Race ID</MudTh>
            <MudTh>Date Added</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="RaceId">@context.RaceId</MudTd>
            <MudTd DataLabel="RaceTime">@context.CreatedDate</MudTd>
            <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => context.ShowBoatDetails = !context.ShowBoatDetails)">@((context.ShowBoatDetails == true) ? "Hide" : "Show") Race Results</MudButton></MudTd>
        </RowTemplate>
        <ChildRowContent>
            @if (context.ShowBoatDetails)
            {
                int minPoints = context.BoatRaces.Where(boat => boat.FinishingStatus == "Finished").Min(boat => boat.Points + 1);
                List<TimeSpan> nonZeroTimingRecords = context.BoatRaces.Where(boat => boat.TimingRecord > TimeSpan.Zero).Select(boat => boat.TimingRecord).ToList();
                TimeSpan minTimingRecord = nonZeroTimingRecords.Any() ? nonZeroTimingRecords.Min() : TimeSpan.Zero;
                TimeSpan maxTimingRecord = nonZeroTimingRecords.Any() ? nonZeroTimingRecords.Max() : TimeSpan.Zero;
                BoatRaces minTimingBoat = context.BoatRaces.FirstOrDefault(boat => boat.TimingRecord == minTimingRecord);
                BoatRaces maxTimingBoat = context.BoatRaces.FirstOrDefault(boat => boat.TimingRecord == maxTimingRecord);

                TimeSpan timeDifference = maxTimingRecord - minTimingRecord;
                TimeSpan averageTimingRecord = nonZeroTimingRecords.Any() ? TimeSpan.FromSeconds(nonZeroTimingRecords.Average(t => t.TotalSeconds)) : TimeSpan.Zero;
                TimeSpan medianTimingRecord = nonZeroTimingRecords.Any() ? CalculateMedianTime(nonZeroTimingRecords) : TimeSpan.Zero;
                <MudTr>
                    <td colspan="4">
                        <MudCard Elevation="0">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.body1">Race Results</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent Class="pa-0">
                                <MudTable Items="@context.BoatRaces" Context="BoatContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">

                                    <HeaderContent>
                                        <!--Order by descending points>-->
                                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<BoatRaces, object>(x => CalculatePoints(x, context))">Finishing Position</MudTableSortLabel></MudTh>
                                        <MudTh>Boat Name</MudTh>
                                        <MudTh>Sail Number</MudTh>
                                        <MudTh>Boat Class</MudTh>
                                        <MudTh>Helm</MudTh>
                                        <MudTh>Elapsed Time</MudTh>
                                        <MudTh>Finishing Status</MudTh>
                                        <MudTh>Points</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>

                                        <MudTd DataLabel="Position">@(CalculatePosition(BoatContext, context))</MudTd>                                        <MudTd DataLabel="Name">@BoatContext.BoatDetails.BoatName</MudTd>
                                        <MudTd DataLabel="Name">@BoatContext.BoatDetails.SailNumber</MudTd>
                                        <MudTd DataLabel="Type">@BoatContext.BoatDetails.BoatType</MudTd>
                                        <MudTd DataLabel="Helm">@BoatContext.HelmName</MudTd>
                                        <MudTd DataLabel="Time">@BoatContext.TimingRecord</MudTd>
                                        <MudTd DataLabel="Status">@BoatContext.FinishingStatus</MudTd>
                                        <MudTd DataLabel="Points">@(BoatContext.FinishingStatus != "Finished" ? context.BoatRaces.Count + 1 : BoatContext.Position)</MudTd>

                                        <!--<MudTd>
                                                <a class="nav-link" href="EditRace/@BoatContext.RaceId">
                                                    <span class="oi oi-pencil" aria-hidden="true"> Edit</span>
                                                </a>
                                            </MudTd>-->

                                    </RowTemplate>
                                <PagerContent>
                                    <br />
                                    <MudTablePager />
                                </PagerContent>
                            </MudTable>
                        </MudCardContent>
                    </MudCard>
@*                    <br />
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" ButtonType="ButtonType.Submit" @onclick=@ExportToPdf>Export to PDF</MudButton>
                    <br />*@
                    @*chart*@
                    <SfChart Title="Time">
                        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="Boat Name"></ChartPrimaryXAxis>
                        <ChartPrimaryYAxis Title="Elapsed Time (minutes)"></ChartPrimaryYAxis>
                        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                        <ChartLegendSettings Visible="true"></ChartLegendSettings>
                            <ChartZoomSettings EnableSelectionZooming="true" EnablePinchZooming="true" EnableMouseWheelZooming="true" EnableScrollbar="true"
                                       Mode="Syncfusion.Blazor.Charts.ZoomMode.X">
                            </ChartZoomSettings>
                        <ChartSeriesCollection>
                            <ChartSeries DataSource="@GetChartData(races)[races.IndexOf(context)].OrderByDescending(cd => cd.TimingRecordMinutes)" XName="BoatName" YName="TimingRecordMinutes" Type="ChartSeriesType.Bar">
                                <ChartMarker>
                                    <ChartDataLabel Visible="true"></ChartDataLabel>
                                </ChartMarker>
                            </ChartSeries>
                        </ChartSeriesCollection>
                    </SfChart>
                    <br/>
                    <table>
                        <thead>
                            <tr>
                                <MudTh></MudTh>
                                <MudTh><b>Minimum</b></MudTh>
                                <MudTh><b>Maximum</b></MudTh>
                                <MudTh><b>Average</b></MudTh>
                                <MudTh><b>Median</b></MudTh>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <MudTd><b>Elapsed Time</b></MudTd>
                                <MudTd>@minTimingRecord.TotalMinutes.ToString("0.00") minutes @minTimingBoat.BoatDetails.BoatName (@minTimingBoat.BoatDetails.SailNumber)</MudTd>
                                <MudTd>@maxTimingRecord.TotalMinutes.ToString("0.00") minutes @maxTimingBoat.BoatDetails.BoatName (@maxTimingBoat.BoatDetails.SailNumber)</MudTd>
                                <MudTd>@averageTimingRecord.TotalMinutes.ToString("0.00") minutes</MudTd>
                                <MudTd>@medianTimingRecord.TotalMinutes.ToString("0.00") minutes</MudTd>
                            </tr>
                            <tr>
                                <MudTd><b>Time Difference</b></MudTd>
                                <MudTd colspan="4"><i>Between Max and Min:</i> @timeDifference.TotalMinutes.ToString("0.00") minutes</MudTd>
                            </tr>
                        </tbody>
                    </table>

                    <br />
                    <SfChart Title="Points">
                        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="Boat Name"></ChartPrimaryXAxis>
                        <ChartPrimaryYAxis Title="Points"></ChartPrimaryYAxis>
                        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                        <ChartLegendSettings Visible="true"></ChartLegendSettings>
                            <ChartZoomSettings EnableSelectionZooming="true" EnablePinchZooming="true" EnableMouseWheelZooming="true" EnableScrollbar="true"
                                       Mode="Syncfusion.Blazor.Charts.ZoomMode.X">
                            </ChartZoomSettings>
                        <ChartSeriesCollection>
                                <ChartSeries DataSource="@GetChartData(races)[races.IndexOf(context)].OrderByDescending(cd => cd.Points)" XName="BoatName" YName="Points" Type="ChartSeriesType.Bar">
                                <ChartMarker>
                                    <ChartDataLabel Visible="true"></ChartDataLabel>
                                </ChartMarker>
                            </ChartSeries>
                        </ChartSeriesCollection>
                    </SfChart>

                </td>
            </MudTr>
            }
        </ChildRowContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
    <MudSpacer />
    <br />
@*    <MudButton Variant="Variant.Filled" Color="Color.Secondary" ButtonType="ButtonType.Submit" @onclick=@ExportToPdf>Export to PDF</MudButton>
*@    <br />

}

@code {

    private string searchString1 = "";
    private List<BoatRaces>? boatRaces = new List<BoatRaces>();
    private List<Races>? races = new List<Races>();
    private List<ChartData> chartData;

    protected override async Task OnInitializedAsync()
    {
        var allRaces = await Task.Run(() => raceService.GetAllRaces());
        races = GetRacesWithSingleBoatType(allRaces);

    }

    //chart
    private List<List<ChartData>> GetChartData(List<Races> races)
    {
        var allChartData = new List<List<ChartData>>();

        foreach (var race in races)
        {
            var chartData = new List<ChartData>();
            foreach (var boatRace in race.BoatRaces)
            {
                int points = boatRace.FinishingStatus != "Finished" ? race.BoatRaces.Count + 1 : boatRace.Position;
                double timingRecordMinutes = Math.Round(boatRace.TimingRecord.TotalMinutes, 2);
                chartData.Add(new ChartData { BoatName = boatRace.BoatDetails.BoatName, Points = points, TimingRecordMinutes = timingRecordMinutes });
            }

            chartData = chartData.OrderBy(cd => cd.Points).ToList();

            allChartData.Add(chartData);
        }

        return allChartData;
    }


    //calculate Points - had to make public for unit test
    public int CalculatePoints(BoatRaces boat, Races race)
    {
        return boat.FinishingStatus != "Finished" ? race.BoatRaces.Count + 1 : boat.Position;
    }

    public int CalculatePosition(BoatRaces boat, Races race)
    {
        return race.BoatRaces.OrderBy(b => CalculatePoints(b, race)).ToList().IndexOf(boat) + 1;
    }


    private List<Races> GetRacesWithSingleBoatType(List<Races> races)
    {
        return races.Where(r => r.BoatRaces.Select(b => b.BoatDetails.BoatType).Distinct().Count() == 1).ToList();
    }



    //Search - had to make filterfunc public for unit test
    private bool FilterFunc1(Races element) => FilterFunc(element, searchString1);

    public bool FilterFunc(Races element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{element.Id}".Contains(searchString))
            return true;
        if ($"{element.BoatDetailsID}".Contains(searchString))
            return true;
        if ($"{element.CreatedDate}".Contains(searchString))
            return true;
        if (element.RaceId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


    //PDF
    protected async Task ExportToPdf()
    {
        using (MemoryStream excelStream = ExportService.CreateSingleRacePdf(races, boatRaces))
        {
            await JS.SaveAs("Sample.pdf", excelStream.ToArray());
        }
    }


    //for chart
    public class ChartData
    {
        public string BoatName { get; set; }
        public int Points { get; set; }
        public double TimingRecordMinutes { get; set; }
    }

    private TimeSpan CalculateMedianTime(List<TimeSpan> times)
    {
        int count = times.Count;
        if (count == 0)
        {
            return TimeSpan.Zero;
        }
        times.Sort();
        if (count % 2 == 0)
        {
            return (times[count / 2 - 1] + times[count / 2]) / 2;
        }
        else
        {
            return times[count / 2];
        }
    }


}
